"""
retrun c, and d values for symplectic integrators
"""
import numpy as np
import sys

def get_cd(order):
    # 2nd order. 21: Verlet, 22: optimized
    if(order == 10):
        c = [1]
        d = [1]
    elif(order == 20):
        c = [0.5, 0.5]
        d = [1, 0]
    elif(order == 211):
        a2 = 1 - 0.5*np.sqrt(2)
        a1 = 1-a2
        b2 = 1/(2.*(1. - a2))
        b1 = 1.- b2
        c = [a1, a2] 
        d = [b1, b2]

    elif(order == 21):
        x = 2*np.sqrt(326)-36
        y = np.power(x, 1./3.)
        z = (y**2 + 6*y - 2)/(12*y)

        c = [z, 1-2*z, z]
        d = [0.5, 0.5, 0]

    # 4th order
    # Yoshida, Neri
    elif(order == 40):
        beta = np.math.pow(2.0, 1.0/3.0)
        c1 = 1.
        c4 = c1
        c2 = 1.-beta
        c3 = c2
        c = np.array([c1, c2, c3, c4])/(2*(2. - beta))

        d1 = 1
        d3 = d1
        d2 = -beta
        d4 = 0
        d = np.array([d1, d2, d3, d4])/(2.0 - beta)

    elif(order == 41):
        w1 = 1./(4 - np.power(4, 1./3.))
        w2 = w1
        w0 = 1-2*(w1+w2);

        c = [w2/2, (w2+w1)/2, (w1+w0)/2, (w1+w0)/2, (w2+w1)/2, w2/2]
        d = [w2, w1, w0, w1, w2]

    elif(order == 42):
        w1 = 0.62546642846767004501
        w2 = 0.28 
        w0 = 1-2*(w1+w2);

        c = [w2/2, (w2+w1)/2, (w1+w0)/2, (w1+w0)/2, (w2+w1)/2, w2/2]
        d = [w2, w1, w0, w1, w2]

    elif(order == 43):
        b1 = 6./11.
        a1 = (642 + np.sqrt(471))/3924.
        a2 = 121./3924.*(12 - np.sqrt(471))
        a3 = 1. - 2*(a1 + a2)
        b2 = 0.5 - b1

        c = [a1, a2, a3, a2, a1]
        d = [b1, b2, b2, b1, 0]

    elif(order == 44): # optimized one
        b1 = 2./5.
        b2 = -0.1
        a1 = (14 - np.sqrt(19))/108.
        a2 = (20 - 7*np.sqrt(19))/108.
        a3 = 0.5 - (a1 + a2)
        b3 = 1. - 2.0*(b1 + b2)
        c = [a1, a2, a3, a3, a2, a1]
        d = [b1, b2, b3, b2, b1, 0]

    elif(order == 45):
        z = np.sqrt(7./8.)/3.
        b1 = 1.0
        b2 = -0.5
        a1 = 0.5 - z
        a2 = -1./3. + z
        a3 = 2./3.

        c = [a1, a2, a3, a2, a1]
        d = [b1, b2, b2, b1, 0]

    elif(order == 46):
        b1 = -3./73.
        b2 = 17./59
        a1 = 0.40518861839525227722
        a2 = -0.28714404081652408900

        a3 = 0.5 - (a1 + a2)
        b3 = 1. - 2.0*(b1 + b2)

        c = [a1, a2, a3, a3, a2, a1]
        d = [b1, b2, b3, b2, b1, 0]

    # 6th order 
    elif(order >= 60 and order <= 62):
        if(order == 60):
        # Yoshida table 1: sol A. A is the fastest among (A, B, and C)
            w3 = 0.784513610477560
            w2 = 0.235573213359357
            w1 = -1.17767998417887

        elif(order == 61):
        # Yoshida table 1: sol B
            w3 = 0.143984816797678e1
            w2 = 0.426068187079180e-2
            w1 = -0.213228522200144e1

        elif(order == 62):
        # Yoshida table 1: sol C
            w3 = 0.144778256239930e1
            w2 = -0.214403531630539e1 
            w1 = 0.152886228424922e-2
    
        w0 = 1-2*(w1 + w2 + w3);
        c = [w3/2, (w3 + w2)/2, (w2 + w1)/2, (w1 + w0)/2, \
                (w1 + w0)/2, (w2 + w1)/2, (w3 + w2)/2, w3/2]
        d = [w3, w2, w1, w0, w1, w2, w3]

    elif(order == 63):
            # McLachlan, table 2
#            w4 = 0.1867
#            w3 = 0.55549702371247839916
#            w2 = 0.12946694891347535806
#            w1 = -0.84326562338773460855
            # Hairer 3-12
            w4 = 0.39216144400731413927925056
            w3 = 0.33259913678935943859974864
            w2 = -0.70624617255763935980996482
            w1 = 0.08221359629355080023149045 
            w0 = 1-2*(w1 + w2 + w3 + w4);
            c = [w4/2, (w4 + w3)/2, (w3 + w2)/2, (w2 + w1)/2, (w1 + w0)/2, \
                    (w1 + w0)/2, (w2 + w1)/2, (w3 +w2)/2, (w4 + w3)/2, w4/2]
            d = [w4, w3, w2, w1, w0, w1, w2, w3, w4]

    elif(order == 64):
        b1 = 0.00016600692650009894
        b2 = -0.37962421426377360608
        b3 = 0.68913741185181063674
        b4 = 0.38064159097092574080
        a1 = -1.01308797891717472981
        a2 = 1.18742957373254270702
        a3 = -0.01833585209646059034
        a4 = 0.34399425728109261313

        c = [a1, a2, a3, a4, a4, a3, a2, a1]
        d = [b1, b2, b3, b4, b3, b2, b1, 0]


    # 8th order 
    elif(order >= 80 and order <= 85):
        if(order == 80):
            # Yoshida talbe 2: sol A
            w1 = -0.161582374150097e1;
            w2 = -0.244699182370524e1;
            w3 = -0.716989419708120e-2;
            w4 =  0.244002732616735e1;
            w5 =  0.157739928123617e0;
            w6 =  0.182020630970714e1;
            w7 =  0.104242620869991e1;

        elif(order == 81):
            # Yoshida talbe 2: sol B
            w1 = -0.169248587770116e-2
            w2 = 0.289195744315849e1
            w3 = 0.378039588360192e-2
            w4 = -0.289688250328827e1
            w5 = 0.289105148970595e1
            w6 = -0.233864815101035e1
            w7 = 0.148819229202922e1

        elif(order == 82):
            # Yoshida talbe 2: sol C 
            w1 = 0.3117908124184
            w2 = -0.155946803821447e1
            w3 = -0.167896928259640e1
            w4 = 0.166335809963315e1
            w5 = -0.106458714789183e1
            w6 = 0.136934946416871e1
            w7 = 0.62903065021043


        elif(order == 83):
            # Yoshida talbe 2: sol D
            #Best among Yoshida's 5 solutions
            w1 = 0.102799849391985
            w2 = -0.196061023297549e1
            w3 = 0.193813913762276e1
            w4 = -0.158240635368243
            w5 = -0.144485223686048e1
            w6 = 0.253693336566229
            w7 = 0.914844246229740

        elif(order == 84):
            # Yoshida talbe 2: sol E: 
            w1 = 0.227738840094906e-1
            w2 = 0.252778927322839e1
            w3 = -0.719180053552772e-1
            w4 = 0.536018921307285e-2
            w5 = -0.204809795887393e1
            w6 = 0.107990467703699
            w7 = 0.130300165760014e1

        elif(order == 85):
            # Suzuki (114)
            w1 = 0.31529309239676659663
            w2 = 0.33462491824529818378
            w3 = 0.29906418130365592384
            w4 = -0.57386247111608226666
            w5 = 0.19075471029623837995
            w6 = -0.40910082580003159400
            w7 = 0.74167036435061295345

        w0= 1-2*(w1 + w2 + w3 + w4 + w5 + w6 + w7);
        c = [w7/2, (w7 + w6)/2, (w6 + w5)/2, (w5 + w4)/2, \
                (w4 + w3)/2, (w3 + w2)/2, (w2 + w1)/2, (w1 + w0)/2, \
                (w1 + w0)/2, (w2+ w1)/2, (w3 + w2)/2, (w4 + w3)/2, \
                (w5 + w4)/2, (w6 + w5)/2, (w7 + w6)/2,  w7/2]

        d = [w7, w6, w5, w4, w3, w2, w1, w0, \
                 w1, w2, w3, w4, w5, w6, w7]

    elif(order == 86):
        #Kahan & Li (1997)
        w8 = 0.13020248308889008087881763
        w7 = 0.56116298177510838456196441
        w6 = -0.38947496264484728640807860
        w5 = 0.15884190655515560089621075
        w4 = -0.39590389413323757733623154
        w3 = 0.18453964097831570709183254
        w2 = 0.25837438768632204729397911
        w1 = 0.29501172360931029887096624
        w0= 1-2*(w1 + w2 + w3 + w4 + w5 + w6 + w7 + w8)

        c = [w8/2, (w8 + w7)/2, (w7 + w6)/2, (w6 + w5)/2, (w5 + w4)/2, \
                (w4 + w3)/2, (w3 + w2)/2, (w2 + w1)/2, (w1 + w0)/2, \
                (w1 + w0)/2, (w2+ w1)/2, (w3 + w2)/2, (w4 + w3)/2, \
                (w5 + w4)/2, (w6 + w5)/2, (w7 + w6)/2,  (w8 + w7)/2, w8/2]

        d = [w8, w7, w6, w5, w4, w3, w2, w1, w0, \
                 w1, w2, w3, w4, w5, w6, w7, w8]
    # 10th order 
    elif(order == 100):
        # 35 stages
        w1 = 0.04967437063972987905456880
        w2 = 0.05066509075992449633587434
        w3 = 0.05194250296244964703718290
        w4 = -0.39203335370863990644808194
        w5 = -0.00486636058313526176219566
        w6 = 0.41143087395589023782070412
        w7 = 0.10308739852747107731580277
        w8 = -0.39910563013603589787862981
        w9 = 0.36613344954622675119314812
        w10 = 0.11199342399981020488957508
        w11 = 0.07497334315589143566613711
        w12 = -0.26973340565451071434460973
        w13 = 0.13096206107716486317465686
        w14 = -0.22959284159390709415121340
        w15 = 0.02791838323507806610952027
        w16 = 0.31309610341510852776481247
        w17 = 0.07879572252168641926390768

        w0 = 1.0 - 2.0*(w1 + w2 + w3 + w4 + w5 + w6 + \
                        w7 + w8 + w9 + w10 + w11 + w12 + \
                        w13 + w14 + w15 + w16 + w17)

        c = [w17, w17 + w16, w16 + w15, w15 + w14, \
             w14 + w13, w13 + w12, w12 + w11, w11 + w10, \
             w10 + w9, w9 + w8, w8 + w7, w7 + w6, \
             w6 + w5, w5 + w4, w4 + w3, w3 + w2, \
             w2 + w1, w1 + w0, w0 + w1, w1 + w2, \
             w2 + w3, w3 + w4, w4 + w5, w5 + w6, \
             w6 + w7, w7 + w8, w8 + w9, w9 + w10, \
             w10 + w11, w11 + w12, w12 + w13, w13 + w14, \
             w14 + w15, w15 + w16, w16 + w17, w17]

        for i in range(len(c)):
            c[i] *= 0.5

        d = [w17, w16, w15, w14, w13, w12, w11, w10, \
             w9, w8, w7, w6, w5, w4, w3, w2, w1, w0, \
             w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, \
             w11, w12, w13, w14, w15, w16, w17]

    c = np.array(c)
    d = np.array(d)

    return c, d
